# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %%writefile p2.cpp
# #include <iostream>
# #include <vector>
# #include <cstdlib>
# #include <ctime>
# #include <omp.h>
# 
# using namespace std;
# 
# // Sequential bubble sort implementation
# void sequential_bubble_sort(vector<int>& arr) {
#     bool isSorted = false;
#     while (!isSorted) {
#         isSorted = true;
#         for (int i = 0; i < arr.size() - 1; ++i) {
#             if (arr[i] > arr[i + 1]) {
#                 swap(arr[i], arr[i + 1]);
#                 isSorted = false;
#             }
#         }
#     }
# }
# 
# // Parallel bubble sort implementation using odd-even transposition
# void parallel_bubble_sort(vector<int>& arr) {
#     bool isSorted = false;
#     while (!isSorted) {
#         isSorted = true;
#         #pragma omp parallel for
#         for (int i = 0; i < arr.size() - 1; i += 2) {
#             if (arr[i] > arr[i + 1]) {
#                 swap(arr[i], arr[i + 1]);
#                 isSorted = false;
#             }
#         }
#         #pragma omp parallel for
#         for (int i = 1; i < arr.size() - 1; i += 2) {
#             if (arr[i] > arr[i + 1]) {
#                 swap(arr[i], arr[i + 1]);
#                 isSorted = false;
#             }
#         }
#     }
# }
# 
# int main() {
#     int n = 1000; // Number of elements in the array
# 
#     // Generate 1000 random numbers
#     srand(time(NULL));
#     vector<int> arr(n);
#     for (int i = 0; i < n; ++i) {
#         arr[i] = rand() % 1000; // Random numbers between 0 and 999
#     }
# 
#     // Copy the original array for sequential sorting
#     vector<int> seq_arr = arr;
# 
#     double start, end;
# 
#     // Sort sequentially and measure time
#     start = omp_get_wtime();
#     sequential_bubble_sort(seq_arr);
#     end = omp_get_wtime();
#     cout << "Sequential bubble sort time: " << end - start << " seconds" << endl;
# 
#     // Sort in parallel and measure time
#     start = omp_get_wtime();
#     parallel_bubble_sort(arr);
#     end = omp_get_wtime();
#     cout << "Parallel bubble sort time: " << end - start << " seconds" << endl;
# 
#     return 0;
# }
#

!g++ -fopenmp p2.cpp -o p2
!./p2

